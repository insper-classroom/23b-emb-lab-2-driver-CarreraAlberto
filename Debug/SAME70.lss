
SAME70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a18  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20400000  00400a18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b0  20400434  00400e4c  00020434  2**2
                  ALLOC
  3 .stack        00002004  204004e4  00400efc  00020434  2**0
                  ALLOC
  4 .heap         00000200  204024e8  00402f00  00020434  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000aba4  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000172d  00000000  00000000  0002b05f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002b7f  00000000  00000000  0002c78c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000578  00000000  00000000  0002f30b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006b0  00000000  00000000  0002f883  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b998  00000000  00000000  0002ff33  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005fb9  00000000  00000000  0004b8cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00089073  00000000  00000000  00051884  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000d10  00000000  00000000  000da8f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 24 40 20 55 04 40 00 51 04 40 00 51 04 40 00     .$@ U.@.Q.@.Q.@.
  400010:	51 04 40 00 51 04 40 00 51 04 40 00 00 00 00 00     Q.@.Q.@.Q.@.....
	...
  40002c:	51 04 40 00 51 04 40 00 00 00 00 00 51 04 40 00     Q.@.Q.@.....Q.@.
  40003c:	51 04 40 00 51 04 40 00 51 04 40 00 51 04 40 00     Q.@.Q.@.Q.@.Q.@.
  40004c:	51 04 40 00 51 04 40 00 51 04 40 00 51 04 40 00     Q.@.Q.@.Q.@.Q.@.
  40005c:	51 04 40 00 51 04 40 00 00 00 00 00 79 02 40 00     Q.@.Q.@.....y.@.
  40006c:	8d 02 40 00 a1 02 40 00 51 04 40 00 51 04 40 00     ..@...@.Q.@.Q.@.
  40007c:	51 04 40 00 b5 02 40 00 c9 02 40 00 51 04 40 00     Q.@...@...@.Q.@.
  40008c:	51 04 40 00 51 04 40 00 51 04 40 00 51 04 40 00     Q.@.Q.@.Q.@.Q.@.
  40009c:	51 04 40 00 51 04 40 00 51 04 40 00 51 04 40 00     Q.@.Q.@.Q.@.Q.@.
  4000ac:	51 04 40 00 51 04 40 00 51 04 40 00 51 04 40 00     Q.@.Q.@.Q.@.Q.@.
  4000bc:	51 04 40 00 51 04 40 00 51 04 40 00 51 04 40 00     Q.@.Q.@.Q.@.Q.@.
  4000cc:	51 04 40 00 00 00 00 00 51 04 40 00 00 00 00 00     Q.@.....Q.@.....
  4000dc:	51 04 40 00 51 04 40 00 51 04 40 00 51 04 40 00     Q.@.Q.@.Q.@.Q.@.
  4000ec:	51 04 40 00 51 04 40 00 51 04 40 00 51 04 40 00     Q.@.Q.@.Q.@.Q.@.
  4000fc:	51 04 40 00 51 04 40 00 51 04 40 00 51 04 40 00     Q.@.Q.@.Q.@.Q.@.
  40010c:	51 04 40 00 51 04 40 00 00 00 00 00 00 00 00 00     Q.@.Q.@.........
  40011c:	00 00 00 00 51 04 40 00 51 04 40 00 51 04 40 00     ....Q.@.Q.@.Q.@.
  40012c:	51 04 40 00 51 04 40 00 00 00 00 00 51 04 40 00     Q.@.Q.@.....Q.@.
  40013c:	51 04 40 00                                         Q.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400434 	.word	0x20400434
  40015c:	00000000 	.word	0x00000000
  400160:	00400a18 	.word	0x00400a18

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00400a18 	.word	0x00400a18
  4001a0:	20400438 	.word	0x20400438
  4001a4:	00400a18 	.word	0x00400a18
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400629 	.word	0x00400629
  4001f8:	00400379 	.word	0x00400379
  4001fc:	004003cd 	.word	0x004003cd
  400200:	004003dd 	.word	0x004003dd
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	004003ed 	.word	0x004003ed
  400210:	004002dd 	.word	0x004002dd
  400214:	00400315 	.word	0x00400315
  400218:	0040051d 	.word	0x0040051d

0040021c <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40021c:	6441      	str	r1, [r0, #68]	; 0x44
  40021e:	4770      	bx	lr

00400220 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400220:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400222:	4770      	bx	lr

00400224 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400224:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400226:	4770      	bx	lr

00400228 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40022c:	4604      	mov	r4, r0
  40022e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400230:	4b0e      	ldr	r3, [pc, #56]	; (40026c <pio_handler_process+0x44>)
  400232:	4798      	blx	r3
  400234:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400236:	4620      	mov	r0, r4
  400238:	4b0d      	ldr	r3, [pc, #52]	; (400270 <pio_handler_process+0x48>)
  40023a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40023c:	4005      	ands	r5, r0
  40023e:	d013      	beq.n	400268 <pio_handler_process+0x40>
  400240:	4c0c      	ldr	r4, [pc, #48]	; (400274 <pio_handler_process+0x4c>)
  400242:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400246:	e003      	b.n	400250 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400248:	42b4      	cmp	r4, r6
  40024a:	d00d      	beq.n	400268 <pio_handler_process+0x40>
  40024c:	3410      	adds	r4, #16
		while (status != 0) {
  40024e:	b15d      	cbz	r5, 400268 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400250:	6820      	ldr	r0, [r4, #0]
  400252:	4540      	cmp	r0, r8
  400254:	d1f8      	bne.n	400248 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400256:	6861      	ldr	r1, [r4, #4]
  400258:	4229      	tst	r1, r5
  40025a:	d0f5      	beq.n	400248 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40025c:	68e3      	ldr	r3, [r4, #12]
  40025e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400260:	6863      	ldr	r3, [r4, #4]
  400262:	ea25 0503 	bic.w	r5, r5, r3
  400266:	e7ef      	b.n	400248 <pio_handler_process+0x20>
  400268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40026c:	00400221 	.word	0x00400221
  400270:	00400225 	.word	0x00400225
  400274:	20400450 	.word	0x20400450

00400278 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400278:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40027a:	210a      	movs	r1, #10
  40027c:	4801      	ldr	r0, [pc, #4]	; (400284 <PIOA_Handler+0xc>)
  40027e:	4b02      	ldr	r3, [pc, #8]	; (400288 <PIOA_Handler+0x10>)
  400280:	4798      	blx	r3
  400282:	bd08      	pop	{r3, pc}
  400284:	400e0e00 	.word	0x400e0e00
  400288:	00400229 	.word	0x00400229

0040028c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40028c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40028e:	210b      	movs	r1, #11
  400290:	4801      	ldr	r0, [pc, #4]	; (400298 <PIOB_Handler+0xc>)
  400292:	4b02      	ldr	r3, [pc, #8]	; (40029c <PIOB_Handler+0x10>)
  400294:	4798      	blx	r3
  400296:	bd08      	pop	{r3, pc}
  400298:	400e1000 	.word	0x400e1000
  40029c:	00400229 	.word	0x00400229

004002a0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4002a0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4002a2:	210c      	movs	r1, #12
  4002a4:	4801      	ldr	r0, [pc, #4]	; (4002ac <PIOC_Handler+0xc>)
  4002a6:	4b02      	ldr	r3, [pc, #8]	; (4002b0 <PIOC_Handler+0x10>)
  4002a8:	4798      	blx	r3
  4002aa:	bd08      	pop	{r3, pc}
  4002ac:	400e1200 	.word	0x400e1200
  4002b0:	00400229 	.word	0x00400229

004002b4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4002b4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4002b6:	2110      	movs	r1, #16
  4002b8:	4801      	ldr	r0, [pc, #4]	; (4002c0 <PIOD_Handler+0xc>)
  4002ba:	4b02      	ldr	r3, [pc, #8]	; (4002c4 <PIOD_Handler+0x10>)
  4002bc:	4798      	blx	r3
  4002be:	bd08      	pop	{r3, pc}
  4002c0:	400e1400 	.word	0x400e1400
  4002c4:	00400229 	.word	0x00400229

004002c8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4002c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4002ca:	2111      	movs	r1, #17
  4002cc:	4801      	ldr	r0, [pc, #4]	; (4002d4 <PIOE_Handler+0xc>)
  4002ce:	4b02      	ldr	r3, [pc, #8]	; (4002d8 <PIOE_Handler+0x10>)
  4002d0:	4798      	blx	r3
  4002d2:	bd08      	pop	{r3, pc}
  4002d4:	400e1600 	.word	0x400e1600
  4002d8:	00400229 	.word	0x00400229

004002dc <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4002dc:	2803      	cmp	r0, #3
  4002de:	d011      	beq.n	400304 <pmc_mck_set_division+0x28>
  4002e0:	2804      	cmp	r0, #4
  4002e2:	d012      	beq.n	40030a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4002e4:	2802      	cmp	r0, #2
  4002e6:	bf0c      	ite	eq
  4002e8:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4002ec:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4002ee:	4a08      	ldr	r2, [pc, #32]	; (400310 <pmc_mck_set_division+0x34>)
  4002f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4002f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4002f6:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4002f8:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4002fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4002fc:	f013 0f08 	tst.w	r3, #8
  400300:	d0fb      	beq.n	4002fa <pmc_mck_set_division+0x1e>
}
  400302:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400304:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400308:	e7f1      	b.n	4002ee <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40030a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40030e:	e7ee      	b.n	4002ee <pmc_mck_set_division+0x12>
  400310:	400e0600 	.word	0x400e0600

00400314 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400314:	4a17      	ldr	r2, [pc, #92]	; (400374 <pmc_switch_mck_to_pllack+0x60>)
  400316:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40031c:	4318      	orrs	r0, r3
  40031e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400320:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400322:	f013 0f08 	tst.w	r3, #8
  400326:	d10a      	bne.n	40033e <pmc_switch_mck_to_pllack+0x2a>
  400328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40032c:	4911      	ldr	r1, [pc, #68]	; (400374 <pmc_switch_mck_to_pllack+0x60>)
  40032e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400330:	f012 0f08 	tst.w	r2, #8
  400334:	d103      	bne.n	40033e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400336:	3b01      	subs	r3, #1
  400338:	d1f9      	bne.n	40032e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40033a:	2001      	movs	r0, #1
  40033c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40033e:	4a0d      	ldr	r2, [pc, #52]	; (400374 <pmc_switch_mck_to_pllack+0x60>)
  400340:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400342:	f023 0303 	bic.w	r3, r3, #3
  400346:	f043 0302 	orr.w	r3, r3, #2
  40034a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40034c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40034e:	f013 0f08 	tst.w	r3, #8
  400352:	d10a      	bne.n	40036a <pmc_switch_mck_to_pllack+0x56>
  400354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400358:	4906      	ldr	r1, [pc, #24]	; (400374 <pmc_switch_mck_to_pllack+0x60>)
  40035a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40035c:	f012 0f08 	tst.w	r2, #8
  400360:	d105      	bne.n	40036e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400362:	3b01      	subs	r3, #1
  400364:	d1f9      	bne.n	40035a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400366:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400368:	4770      	bx	lr
	return 0;
  40036a:	2000      	movs	r0, #0
  40036c:	4770      	bx	lr
  40036e:	2000      	movs	r0, #0
  400370:	4770      	bx	lr
  400372:	bf00      	nop
  400374:	400e0600 	.word	0x400e0600

00400378 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400378:	b9a0      	cbnz	r0, 4003a4 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40037a:	480e      	ldr	r0, [pc, #56]	; (4003b4 <pmc_switch_mainck_to_xtal+0x3c>)
  40037c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40037e:	0209      	lsls	r1, r1, #8
  400380:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400382:	4a0d      	ldr	r2, [pc, #52]	; (4003b8 <pmc_switch_mainck_to_xtal+0x40>)
  400384:	401a      	ands	r2, r3
  400386:	4b0d      	ldr	r3, [pc, #52]	; (4003bc <pmc_switch_mainck_to_xtal+0x44>)
  400388:	4313      	orrs	r3, r2
  40038a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40038c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40038e:	4602      	mov	r2, r0
  400390:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400392:	f013 0f01 	tst.w	r3, #1
  400396:	d0fb      	beq.n	400390 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400398:	4a06      	ldr	r2, [pc, #24]	; (4003b4 <pmc_switch_mainck_to_xtal+0x3c>)
  40039a:	6a11      	ldr	r1, [r2, #32]
  40039c:	4b08      	ldr	r3, [pc, #32]	; (4003c0 <pmc_switch_mainck_to_xtal+0x48>)
  40039e:	430b      	orrs	r3, r1
  4003a0:	6213      	str	r3, [r2, #32]
  4003a2:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4003a4:	4903      	ldr	r1, [pc, #12]	; (4003b4 <pmc_switch_mainck_to_xtal+0x3c>)
  4003a6:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4003a8:	4a06      	ldr	r2, [pc, #24]	; (4003c4 <pmc_switch_mainck_to_xtal+0x4c>)
  4003aa:	401a      	ands	r2, r3
  4003ac:	4b06      	ldr	r3, [pc, #24]	; (4003c8 <pmc_switch_mainck_to_xtal+0x50>)
  4003ae:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4003b0:	620b      	str	r3, [r1, #32]
  4003b2:	4770      	bx	lr
  4003b4:	400e0600 	.word	0x400e0600
  4003b8:	ffc8fffc 	.word	0xffc8fffc
  4003bc:	00370001 	.word	0x00370001
  4003c0:	01370000 	.word	0x01370000
  4003c4:	fec8fffc 	.word	0xfec8fffc
  4003c8:	01370002 	.word	0x01370002

004003cc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4003cc:	4b02      	ldr	r3, [pc, #8]	; (4003d8 <pmc_osc_is_ready_mainck+0xc>)
  4003ce:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4003d0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4003d4:	4770      	bx	lr
  4003d6:	bf00      	nop
  4003d8:	400e0600 	.word	0x400e0600

004003dc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4003dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4003e0:	4b01      	ldr	r3, [pc, #4]	; (4003e8 <pmc_disable_pllack+0xc>)
  4003e2:	629a      	str	r2, [r3, #40]	; 0x28
  4003e4:	4770      	bx	lr
  4003e6:	bf00      	nop
  4003e8:	400e0600 	.word	0x400e0600

004003ec <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4003ec:	4b02      	ldr	r3, [pc, #8]	; (4003f8 <pmc_is_locked_pllack+0xc>)
  4003ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4003f0:	f000 0002 	and.w	r0, r0, #2
  4003f4:	4770      	bx	lr
  4003f6:	bf00      	nop
  4003f8:	400e0600 	.word	0x400e0600

004003fc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4003fc:	283f      	cmp	r0, #63	; 0x3f
  4003fe:	d81e      	bhi.n	40043e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400400:	281f      	cmp	r0, #31
  400402:	d80c      	bhi.n	40041e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400404:	4b11      	ldr	r3, [pc, #68]	; (40044c <pmc_enable_periph_clk+0x50>)
  400406:	699a      	ldr	r2, [r3, #24]
  400408:	2301      	movs	r3, #1
  40040a:	4083      	lsls	r3, r0
  40040c:	4393      	bics	r3, r2
  40040e:	d018      	beq.n	400442 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400410:	2301      	movs	r3, #1
  400412:	fa03 f000 	lsl.w	r0, r3, r0
  400416:	4b0d      	ldr	r3, [pc, #52]	; (40044c <pmc_enable_periph_clk+0x50>)
  400418:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40041a:	2000      	movs	r0, #0
  40041c:	4770      	bx	lr
		ul_id -= 32;
  40041e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400420:	4b0a      	ldr	r3, [pc, #40]	; (40044c <pmc_enable_periph_clk+0x50>)
  400422:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400426:	2301      	movs	r3, #1
  400428:	4083      	lsls	r3, r0
  40042a:	4393      	bics	r3, r2
  40042c:	d00b      	beq.n	400446 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40042e:	2301      	movs	r3, #1
  400430:	fa03 f000 	lsl.w	r0, r3, r0
  400434:	4b05      	ldr	r3, [pc, #20]	; (40044c <pmc_enable_periph_clk+0x50>)
  400436:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40043a:	2000      	movs	r0, #0
  40043c:	4770      	bx	lr
		return 1;
  40043e:	2001      	movs	r0, #1
  400440:	4770      	bx	lr
	return 0;
  400442:	2000      	movs	r0, #0
  400444:	4770      	bx	lr
  400446:	2000      	movs	r0, #0
}
  400448:	4770      	bx	lr
  40044a:	bf00      	nop
  40044c:	400e0600 	.word	0x400e0600

00400450 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400450:	e7fe      	b.n	400450 <Dummy_Handler>
	...

00400454 <Reset_Handler>:
{
  400454:	b500      	push	{lr}
  400456:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400458:	4b25      	ldr	r3, [pc, #148]	; (4004f0 <Reset_Handler+0x9c>)
  40045a:	4a26      	ldr	r2, [pc, #152]	; (4004f4 <Reset_Handler+0xa0>)
  40045c:	429a      	cmp	r2, r3
  40045e:	d010      	beq.n	400482 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400460:	4b25      	ldr	r3, [pc, #148]	; (4004f8 <Reset_Handler+0xa4>)
  400462:	4a23      	ldr	r2, [pc, #140]	; (4004f0 <Reset_Handler+0x9c>)
  400464:	429a      	cmp	r2, r3
  400466:	d20c      	bcs.n	400482 <Reset_Handler+0x2e>
  400468:	3b01      	subs	r3, #1
  40046a:	1a9b      	subs	r3, r3, r2
  40046c:	f023 0303 	bic.w	r3, r3, #3
  400470:	3304      	adds	r3, #4
  400472:	4413      	add	r3, r2
  400474:	491f      	ldr	r1, [pc, #124]	; (4004f4 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400476:	f851 0b04 	ldr.w	r0, [r1], #4
  40047a:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40047e:	429a      	cmp	r2, r3
  400480:	d1f9      	bne.n	400476 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400482:	4b1e      	ldr	r3, [pc, #120]	; (4004fc <Reset_Handler+0xa8>)
  400484:	4a1e      	ldr	r2, [pc, #120]	; (400500 <Reset_Handler+0xac>)
  400486:	429a      	cmp	r2, r3
  400488:	d20a      	bcs.n	4004a0 <Reset_Handler+0x4c>
  40048a:	3b01      	subs	r3, #1
  40048c:	1a9b      	subs	r3, r3, r2
  40048e:	f023 0303 	bic.w	r3, r3, #3
  400492:	3304      	adds	r3, #4
  400494:	4413      	add	r3, r2
                *pDest++ = 0;
  400496:	2100      	movs	r1, #0
  400498:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40049c:	4293      	cmp	r3, r2
  40049e:	d1fb      	bne.n	400498 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4004a0:	4a18      	ldr	r2, [pc, #96]	; (400504 <Reset_Handler+0xb0>)
  4004a2:	4b19      	ldr	r3, [pc, #100]	; (400508 <Reset_Handler+0xb4>)
  4004a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4004a8:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4004aa:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4004ae:	fab3 f383 	clz	r3, r3
  4004b2:	095b      	lsrs	r3, r3, #5
  4004b4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4004b6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4004b8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4004bc:	2200      	movs	r2, #0
  4004be:	4b13      	ldr	r3, [pc, #76]	; (40050c <Reset_Handler+0xb8>)
  4004c0:	701a      	strb	r2, [r3, #0]
	return flags;
  4004c2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4004c4:	4a12      	ldr	r2, [pc, #72]	; (400510 <Reset_Handler+0xbc>)
  4004c6:	6813      	ldr	r3, [r2, #0]
  4004c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4004cc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4004ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4004d2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4004d6:	b129      	cbz	r1, 4004e4 <Reset_Handler+0x90>
		cpu_irq_enable();
  4004d8:	2201      	movs	r2, #1
  4004da:	4b0c      	ldr	r3, [pc, #48]	; (40050c <Reset_Handler+0xb8>)
  4004dc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4004de:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004e2:	b662      	cpsie	i
        __libc_init_array();
  4004e4:	4b0b      	ldr	r3, [pc, #44]	; (400514 <Reset_Handler+0xc0>)
  4004e6:	4798      	blx	r3
        main();
  4004e8:	4b0b      	ldr	r3, [pc, #44]	; (400518 <Reset_Handler+0xc4>)
  4004ea:	4798      	blx	r3
  4004ec:	e7fe      	b.n	4004ec <Reset_Handler+0x98>
  4004ee:	bf00      	nop
  4004f0:	20400000 	.word	0x20400000
  4004f4:	00400a18 	.word	0x00400a18
  4004f8:	20400434 	.word	0x20400434
  4004fc:	204004e4 	.word	0x204004e4
  400500:	20400434 	.word	0x20400434
  400504:	e000ed00 	.word	0xe000ed00
  400508:	00400000 	.word	0x00400000
  40050c:	20400000 	.word	0x20400000
  400510:	e000ed88 	.word	0xe000ed88
  400514:	00400881 	.word	0x00400881
  400518:	004007d1 	.word	0x004007d1

0040051c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40051c:	4b3b      	ldr	r3, [pc, #236]	; (40060c <SystemCoreClockUpdate+0xf0>)
  40051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400520:	f003 0303 	and.w	r3, r3, #3
  400524:	2b01      	cmp	r3, #1
  400526:	d01d      	beq.n	400564 <SystemCoreClockUpdate+0x48>
  400528:	b183      	cbz	r3, 40054c <SystemCoreClockUpdate+0x30>
  40052a:	2b02      	cmp	r3, #2
  40052c:	d036      	beq.n	40059c <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40052e:	4b37      	ldr	r3, [pc, #220]	; (40060c <SystemCoreClockUpdate+0xf0>)
  400530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400532:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400536:	2b70      	cmp	r3, #112	; 0x70
  400538:	d05f      	beq.n	4005fa <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40053a:	4b34      	ldr	r3, [pc, #208]	; (40060c <SystemCoreClockUpdate+0xf0>)
  40053c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40053e:	4934      	ldr	r1, [pc, #208]	; (400610 <SystemCoreClockUpdate+0xf4>)
  400540:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400544:	680b      	ldr	r3, [r1, #0]
  400546:	40d3      	lsrs	r3, r2
  400548:	600b      	str	r3, [r1, #0]
  40054a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40054c:	4b31      	ldr	r3, [pc, #196]	; (400614 <SystemCoreClockUpdate+0xf8>)
  40054e:	695b      	ldr	r3, [r3, #20]
  400550:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400554:	bf14      	ite	ne
  400556:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40055a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40055e:	4b2c      	ldr	r3, [pc, #176]	; (400610 <SystemCoreClockUpdate+0xf4>)
  400560:	601a      	str	r2, [r3, #0]
  400562:	e7e4      	b.n	40052e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400564:	4b29      	ldr	r3, [pc, #164]	; (40060c <SystemCoreClockUpdate+0xf0>)
  400566:	6a1b      	ldr	r3, [r3, #32]
  400568:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40056c:	d003      	beq.n	400576 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40056e:	4a2a      	ldr	r2, [pc, #168]	; (400618 <SystemCoreClockUpdate+0xfc>)
  400570:	4b27      	ldr	r3, [pc, #156]	; (400610 <SystemCoreClockUpdate+0xf4>)
  400572:	601a      	str	r2, [r3, #0]
  400574:	e7db      	b.n	40052e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400576:	4a29      	ldr	r2, [pc, #164]	; (40061c <SystemCoreClockUpdate+0x100>)
  400578:	4b25      	ldr	r3, [pc, #148]	; (400610 <SystemCoreClockUpdate+0xf4>)
  40057a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40057c:	4b23      	ldr	r3, [pc, #140]	; (40060c <SystemCoreClockUpdate+0xf0>)
  40057e:	6a1b      	ldr	r3, [r3, #32]
  400580:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400584:	2b10      	cmp	r3, #16
  400586:	d005      	beq.n	400594 <SystemCoreClockUpdate+0x78>
  400588:	2b20      	cmp	r3, #32
  40058a:	d1d0      	bne.n	40052e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  40058c:	4a22      	ldr	r2, [pc, #136]	; (400618 <SystemCoreClockUpdate+0xfc>)
  40058e:	4b20      	ldr	r3, [pc, #128]	; (400610 <SystemCoreClockUpdate+0xf4>)
  400590:	601a      	str	r2, [r3, #0]
          break;
  400592:	e7cc      	b.n	40052e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400594:	4a22      	ldr	r2, [pc, #136]	; (400620 <SystemCoreClockUpdate+0x104>)
  400596:	4b1e      	ldr	r3, [pc, #120]	; (400610 <SystemCoreClockUpdate+0xf4>)
  400598:	601a      	str	r2, [r3, #0]
          break;
  40059a:	e7c8      	b.n	40052e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40059c:	4b1b      	ldr	r3, [pc, #108]	; (40060c <SystemCoreClockUpdate+0xf0>)
  40059e:	6a1b      	ldr	r3, [r3, #32]
  4005a0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4005a4:	d016      	beq.n	4005d4 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4005a6:	4a1c      	ldr	r2, [pc, #112]	; (400618 <SystemCoreClockUpdate+0xfc>)
  4005a8:	4b19      	ldr	r3, [pc, #100]	; (400610 <SystemCoreClockUpdate+0xf4>)
  4005aa:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4005ac:	4b17      	ldr	r3, [pc, #92]	; (40060c <SystemCoreClockUpdate+0xf0>)
  4005ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005b0:	f003 0303 	and.w	r3, r3, #3
  4005b4:	2b02      	cmp	r3, #2
  4005b6:	d1ba      	bne.n	40052e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4005b8:	4a14      	ldr	r2, [pc, #80]	; (40060c <SystemCoreClockUpdate+0xf0>)
  4005ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4005bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4005be:	4814      	ldr	r0, [pc, #80]	; (400610 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4005c0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4005c4:	6803      	ldr	r3, [r0, #0]
  4005c6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4005ca:	b2d2      	uxtb	r2, r2
  4005cc:	fbb3 f3f2 	udiv	r3, r3, r2
  4005d0:	6003      	str	r3, [r0, #0]
  4005d2:	e7ac      	b.n	40052e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4005d4:	4a11      	ldr	r2, [pc, #68]	; (40061c <SystemCoreClockUpdate+0x100>)
  4005d6:	4b0e      	ldr	r3, [pc, #56]	; (400610 <SystemCoreClockUpdate+0xf4>)
  4005d8:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4005da:	4b0c      	ldr	r3, [pc, #48]	; (40060c <SystemCoreClockUpdate+0xf0>)
  4005dc:	6a1b      	ldr	r3, [r3, #32]
  4005de:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4005e2:	2b10      	cmp	r3, #16
  4005e4:	d005      	beq.n	4005f2 <SystemCoreClockUpdate+0xd6>
  4005e6:	2b20      	cmp	r3, #32
  4005e8:	d1e0      	bne.n	4005ac <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4005ea:	4a0b      	ldr	r2, [pc, #44]	; (400618 <SystemCoreClockUpdate+0xfc>)
  4005ec:	4b08      	ldr	r3, [pc, #32]	; (400610 <SystemCoreClockUpdate+0xf4>)
  4005ee:	601a      	str	r2, [r3, #0]
          break;
  4005f0:	e7dc      	b.n	4005ac <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4005f2:	4a0b      	ldr	r2, [pc, #44]	; (400620 <SystemCoreClockUpdate+0x104>)
  4005f4:	4b06      	ldr	r3, [pc, #24]	; (400610 <SystemCoreClockUpdate+0xf4>)
  4005f6:	601a      	str	r2, [r3, #0]
          break;
  4005f8:	e7d8      	b.n	4005ac <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4005fa:	4a05      	ldr	r2, [pc, #20]	; (400610 <SystemCoreClockUpdate+0xf4>)
  4005fc:	6813      	ldr	r3, [r2, #0]
  4005fe:	4909      	ldr	r1, [pc, #36]	; (400624 <SystemCoreClockUpdate+0x108>)
  400600:	fba1 1303 	umull	r1, r3, r1, r3
  400604:	085b      	lsrs	r3, r3, #1
  400606:	6013      	str	r3, [r2, #0]
  400608:	4770      	bx	lr
  40060a:	bf00      	nop
  40060c:	400e0600 	.word	0x400e0600
  400610:	20400004 	.word	0x20400004
  400614:	400e1810 	.word	0x400e1810
  400618:	00b71b00 	.word	0x00b71b00
  40061c:	003d0900 	.word	0x003d0900
  400620:	007a1200 	.word	0x007a1200
  400624:	aaaaaaab 	.word	0xaaaaaaab

00400628 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400628:	4b12      	ldr	r3, [pc, #72]	; (400674 <system_init_flash+0x4c>)
  40062a:	4298      	cmp	r0, r3
  40062c:	d911      	bls.n	400652 <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40062e:	4b12      	ldr	r3, [pc, #72]	; (400678 <system_init_flash+0x50>)
  400630:	4298      	cmp	r0, r3
  400632:	d913      	bls.n	40065c <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400634:	4b11      	ldr	r3, [pc, #68]	; (40067c <system_init_flash+0x54>)
  400636:	4298      	cmp	r0, r3
  400638:	d914      	bls.n	400664 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40063a:	4b11      	ldr	r3, [pc, #68]	; (400680 <system_init_flash+0x58>)
  40063c:	4298      	cmp	r0, r3
  40063e:	d915      	bls.n	40066c <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400640:	4b10      	ldr	r3, [pc, #64]	; (400684 <system_init_flash+0x5c>)
  400642:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400644:	bf94      	ite	ls
  400646:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40064a:	4a0f      	ldrhi	r2, [pc, #60]	; (400688 <system_init_flash+0x60>)
  40064c:	4b0f      	ldr	r3, [pc, #60]	; (40068c <system_init_flash+0x64>)
  40064e:	601a      	str	r2, [r3, #0]
  400650:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400652:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400656:	4b0d      	ldr	r3, [pc, #52]	; (40068c <system_init_flash+0x64>)
  400658:	601a      	str	r2, [r3, #0]
  40065a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40065c:	4a0c      	ldr	r2, [pc, #48]	; (400690 <system_init_flash+0x68>)
  40065e:	4b0b      	ldr	r3, [pc, #44]	; (40068c <system_init_flash+0x64>)
  400660:	601a      	str	r2, [r3, #0]
  400662:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400664:	4a0b      	ldr	r2, [pc, #44]	; (400694 <system_init_flash+0x6c>)
  400666:	4b09      	ldr	r3, [pc, #36]	; (40068c <system_init_flash+0x64>)
  400668:	601a      	str	r2, [r3, #0]
  40066a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40066c:	4a0a      	ldr	r2, [pc, #40]	; (400698 <system_init_flash+0x70>)
  40066e:	4b07      	ldr	r3, [pc, #28]	; (40068c <system_init_flash+0x64>)
  400670:	601a      	str	r2, [r3, #0]
  400672:	4770      	bx	lr
  400674:	01312cff 	.word	0x01312cff
  400678:	026259ff 	.word	0x026259ff
  40067c:	039386ff 	.word	0x039386ff
  400680:	04c4b3ff 	.word	0x04c4b3ff
  400684:	05f5e0ff 	.word	0x05f5e0ff
  400688:	04000500 	.word	0x04000500
  40068c:	400e0c00 	.word	0x400e0c00
  400690:	04000100 	.word	0x04000100
  400694:	04000200 	.word	0x04000200
  400698:	04000300 	.word	0x04000300

0040069c <_pio_set_input>:
	else {
		p_pio->PIO_PUDR = ul_mask;
	}
}

void _pio_set_input(Pio *p_pio, const uint32_t ul_mask, const uint32_t ul_attribute) {
  40069c:	b570      	push	{r4, r5, r6, lr}
  40069e:	4604      	mov	r4, r0
  4006a0:	460d      	mov	r5, r1
  4006a2:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
  4006a4:	4b08      	ldr	r3, [pc, #32]	; (4006c8 <_pio_set_input+0x2c>)
  4006a6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4006a8:	f016 0f01 	tst.w	r6, #1
  4006ac:	d107      	bne.n	4006be <_pio_set_input+0x22>
		p_pio->PIO_PUDR = ul_mask;
  4006ae:	6625      	str	r5, [r4, #96]	; 0x60
	_pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4006b0:	f016 0f0a 	tst.w	r6, #10
  4006b4:	d105      	bne.n	4006c2 <_pio_set_input+0x26>
		p_pio->PIO_IFER = ul_mask;
		} 
	else {
		p_pio->PIO_IFDR = ul_mask;
  4006b6:	6265      	str	r5, [r4, #36]	; 0x24
	}

	// Inputs
	p_pio->PIO_ODR = ul_mask;
  4006b8:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
  4006ba:	6025      	str	r5, [r4, #0]
  4006bc:	bd70      	pop	{r4, r5, r6, pc}
		p_pio->PIO_PUER = ul_mask;
  4006be:	6665      	str	r5, [r4, #100]	; 0x64
  4006c0:	e7f6      	b.n	4006b0 <_pio_set_input+0x14>
		p_pio->PIO_IFER = ul_mask;
  4006c2:	6225      	str	r5, [r4, #32]
  4006c4:	e7f8      	b.n	4006b8 <_pio_set_input+0x1c>
  4006c6:	bf00      	nop
  4006c8:	0040021d 	.word	0x0040021d

004006cc <_delay_ms>:
	else {
		return 1;
	}
}

void _delay_ms(uint32_t ms) {
  4006cc:	b082      	sub	sp, #8
	for (volatile uint32_t i = 0; i < ms * 50000; i++) {
  4006ce:	2300      	movs	r3, #0
  4006d0:	9301      	str	r3, [sp, #4]
  4006d2:	f24c 3350 	movw	r3, #50000	; 0xc350
  4006d6:	fb03 f000 	mul.w	r0, r3, r0
  4006da:	9b01      	ldr	r3, [sp, #4]
  4006dc:	4298      	cmp	r0, r3
  4006de:	d905      	bls.n	4006ec <_delay_ms+0x20>
  4006e0:	9b01      	ldr	r3, [sp, #4]
  4006e2:	3301      	adds	r3, #1
  4006e4:	9301      	str	r3, [sp, #4]
  4006e6:	9b01      	ldr	r3, [sp, #4]
  4006e8:	4283      	cmp	r3, r0
  4006ea:	d3f9      	bcc.n	4006e0 <_delay_ms+0x14>
		// Espera por "ms" milisegundo
	}
}
  4006ec:	b002      	add	sp, #8
  4006ee:	4770      	bx	lr

004006f0 <init>:


// Função de inicialização do uC
void init(void) {
  4006f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Initialize the board clock
  sysclk_init();
  4006f2:	4b2e      	ldr	r3, [pc, #184]	; (4007ac <init+0xbc>)
  4006f4:	4798      	blx	r3

  // Disativa WatchDog Timer
  WDT->WDT_MR = WDT_MR_WDDIS;
  4006f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4006fa:	4b2d      	ldr	r3, [pc, #180]	; (4007b0 <init+0xc0>)
  4006fc:	605a      	str	r2, [r3, #4]

  pmc_enable_periph_clk(LED_PIO_ID);
  4006fe:	200c      	movs	r0, #12
  400700:	4c2c      	ldr	r4, [pc, #176]	; (4007b4 <init+0xc4>)
  400702:	47a0      	blx	r4
  pmc_enable_periph_clk(LED1_PIO_ID);
  400704:	200a      	movs	r0, #10
  400706:	47a0      	blx	r4
  pmc_enable_periph_clk(LED2_PIO_ID);
  400708:	200c      	movs	r0, #12
  40070a:	47a0      	blx	r4
  pmc_enable_periph_clk(LED3_PIO_ID);
  40070c:	200b      	movs	r0, #11
  40070e:	47a0      	blx	r4
  pmc_enable_periph_clk(BUT1_PIO_ID);
  400710:	2010      	movs	r0, #16
  400712:	47a0      	blx	r4
  pmc_enable_periph_clk(BUT2_PIO_ID);
  400714:	200c      	movs	r0, #12
  400716:	47a0      	blx	r4
  pmc_enable_periph_clk(BUT3_PIO_ID);
  400718:	200a      	movs	r0, #10
  40071a:	47a0      	blx	r4
	pio_disable_interrupt(p_pio, ul_mask);
  40071c:	4c26      	ldr	r4, [pc, #152]	; (4007b8 <init+0xc8>)
  40071e:	f44f 7180 	mov.w	r1, #256	; 0x100
  400722:	4620      	mov	r0, r4
  400724:	4f25      	ldr	r7, [pc, #148]	; (4007bc <init+0xcc>)
  400726:	47b8      	blx	r7
		p_pio->PIO_PUDR = ul_mask;
  400728:	f44f 7380 	mov.w	r3, #256	; 0x100
  40072c:	6623      	str	r3, [r4, #96]	; 0x60
		p_pio->PIO_MDDR = ul_mask;
  40072e:	6563      	str	r3, [r4, #84]	; 0x54
		p_pio->PIO_CODR = ul_mask;
  400730:	6363      	str	r3, [r4, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400732:	6123      	str	r3, [r4, #16]
	p_pio->PIO_PER = ul_mask;
  400734:	6023      	str	r3, [r4, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400736:	4d22      	ldr	r5, [pc, #136]	; (4007c0 <init+0xd0>)
  400738:	2101      	movs	r1, #1
  40073a:	4628      	mov	r0, r5
  40073c:	47b8      	blx	r7
		p_pio->PIO_PUDR = ul_mask;
  40073e:	2301      	movs	r3, #1
  400740:	662b      	str	r3, [r5, #96]	; 0x60
		p_pio->PIO_MDDR = ul_mask;
  400742:	656b      	str	r3, [r5, #84]	; 0x54
		p_pio->PIO_CODR = ul_mask;
  400744:	636b      	str	r3, [r5, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400746:	612b      	str	r3, [r5, #16]
	p_pio->PIO_PER = ul_mask;
  400748:	602b      	str	r3, [r5, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40074a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40074e:	4620      	mov	r0, r4
  400750:	47b8      	blx	r7
		p_pio->PIO_PUDR = ul_mask;
  400752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400756:	6623      	str	r3, [r4, #96]	; 0x60
		p_pio->PIO_MDDR = ul_mask;
  400758:	6563      	str	r3, [r4, #84]	; 0x54
		p_pio->PIO_CODR = ul_mask;
  40075a:	6363      	str	r3, [r4, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40075c:	6123      	str	r3, [r4, #16]
	p_pio->PIO_PER = ul_mask;
  40075e:	6023      	str	r3, [r4, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400760:	4e18      	ldr	r6, [pc, #96]	; (4007c4 <init+0xd4>)
  400762:	2104      	movs	r1, #4
  400764:	4630      	mov	r0, r6
  400766:	47b8      	blx	r7
		p_pio->PIO_PUDR = ul_mask;
  400768:	2304      	movs	r3, #4
  40076a:	6633      	str	r3, [r6, #96]	; 0x60
		p_pio->PIO_MDDR = ul_mask;
  40076c:	6573      	str	r3, [r6, #84]	; 0x54
		p_pio->PIO_CODR = ul_mask;
  40076e:	6373      	str	r3, [r6, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400770:	6133      	str	r3, [r6, #16]
	p_pio->PIO_PER = ul_mask;
  400772:	6033      	str	r3, [r6, #0]

  _pio_set_output(LED1_PIO, LED1_PIO_IDX_MASK, 0, 0, 0);
  _pio_set_output(LED2_PIO, LED2_PIO_IDX_MASK, 0, 0, 0);
  _pio_set_output(LED3_PIO, LED3_PIO_IDX_MASK, 0, 0, 0);

  _pio_set_input(BUT1_PIO, BUT1_PIO_IDX_MASK, _PIO_PULLUP | _PIO_DEBOUNCE);
  400774:	4f14      	ldr	r7, [pc, #80]	; (4007c8 <init+0xd8>)
  400776:	2209      	movs	r2, #9
  400778:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40077c:	4638      	mov	r0, r7
  40077e:	4e13      	ldr	r6, [pc, #76]	; (4007cc <init+0xdc>)
  400780:	47b0      	blx	r6
  _pio_set_input(BUT2_PIO, BUT2_PIO_IDX_MASK, _PIO_PULLUP | _PIO_DEBOUNCE);
  400782:	2209      	movs	r2, #9
  400784:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  400788:	4620      	mov	r0, r4
  40078a:	47b0      	blx	r6
  _pio_set_input(BUT3_PIO, BUT3_PIO_IDX_MASK, _PIO_PULLUP | _PIO_DEBOUNCE);
  40078c:	2209      	movs	r2, #9
  40078e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400792:	4628      	mov	r0, r5
  400794:	47b0      	blx	r6
		p_pio->PIO_PUER = ul_mask;
  400796:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40079a:	667b      	str	r3, [r7, #100]	; 0x64
  40079c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  4007a0:	6663      	str	r3, [r4, #100]	; 0x64
  4007a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4007a6:	666b      	str	r3, [r5, #100]	; 0x64
  4007a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4007aa:	bf00      	nop
  4007ac:	004001ad 	.word	0x004001ad
  4007b0:	400e1850 	.word	0x400e1850
  4007b4:	004003fd 	.word	0x004003fd
  4007b8:	400e1200 	.word	0x400e1200
  4007bc:	0040021d 	.word	0x0040021d
  4007c0:	400e0e00 	.word	0x400e0e00
  4007c4:	400e1000 	.word	0x400e1000
  4007c8:	400e1400 	.word	0x400e1400
  4007cc:	0040069d 	.word	0x0040069d

004007d0 <main>:
/************************************************************************/
/* Main                                                                 */
/************************************************************************/

// Funcao principal chamada na inicalizacao do uC.
int main(void) {
  4007d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  init();
  4007d4:	4b24      	ldr	r3, [pc, #144]	; (400868 <main+0x98>)
  4007d6:	4798      	blx	r3
		_ul_mask = p_pio->PIO_PDSR;
  4007d8:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 40087c <main+0xac>
	p_pio->PIO_SODR = ul_mask;
  4007dc:	4e23      	ldr	r6, [pc, #140]	; (40086c <main+0x9c>)
		_ul_mask = p_pio->PIO_PDSR;
  4007de:	4f24      	ldr	r7, [pc, #144]	; (400870 <main+0xa0>)
  while (1) {
    if (!_pio_get(BUT1_PIO, PIO_INPUT,
                 BUT1_PIO_IDX_MASK)) { // Caso aperte Botao 1
      for (int i = 0; i < 5; i++) {
        _pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
        _delay_ms(200);
  4007e0:	4c24      	ldr	r4, [pc, #144]	; (400874 <main+0xa4>)
  4007e2:	e006      	b.n	4007f2 <main+0x22>
	p_pio->PIO_CODR = ul_mask;
  4007e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4007e8:	637b      	str	r3, [r7, #52]	; 0x34
		_ul_mask = p_pio->PIO_PDSR;
  4007ea:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        _pio_clear(LED2_PIO, LED2_PIO_IDX_MASK);
        _delay_ms(200);
      }
      _pio_clear(LED2_PIO, LED2_PIO_IDX_MASK);
    }
    if (!_pio_get(BUT3_PIO, PIO_INPUT,
  4007ec:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  4007f0:	d026      	beq.n	400840 <main+0x70>
		_ul_mask = p_pio->PIO_PDSR;
  4007f2:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
    if (!_pio_get(BUT1_PIO, PIO_INPUT,
  4007f6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  4007fa:	d10f      	bne.n	40081c <main+0x4c>
  4007fc:	2505      	movs	r5, #5
	p_pio->PIO_SODR = ul_mask;
  4007fe:	f04f 0801 	mov.w	r8, #1
  400802:	46c1      	mov	r9, r8
  400804:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
        _delay_ms(200);
  400808:	20c8      	movs	r0, #200	; 0xc8
  40080a:	47a0      	blx	r4
	p_pio->PIO_CODR = ul_mask;
  40080c:	f8c6 8034 	str.w	r8, [r6, #52]	; 0x34
        _delay_ms(200);
  400810:	20c8      	movs	r0, #200	; 0xc8
  400812:	47a0      	blx	r4
      for (int i = 0; i < 5; i++) {
  400814:	3d01      	subs	r5, #1
  400816:	d1f5      	bne.n	400804 <main+0x34>
	p_pio->PIO_CODR = ul_mask;
  400818:	2301      	movs	r3, #1
  40081a:	6373      	str	r3, [r6, #52]	; 0x34
		_ul_mask = p_pio->PIO_PDSR;
  40081c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    if (!_pio_get(BUT2_PIO, PIO_INPUT,
  40081e:	2b00      	cmp	r3, #0
  400820:	dbe3      	blt.n	4007ea <main+0x1a>
  400822:	2505      	movs	r5, #5
	p_pio->PIO_SODR = ul_mask;
  400824:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
  400828:	46c1      	mov	r9, r8
  40082a:	f8c7 9030 	str.w	r9, [r7, #48]	; 0x30
        _delay_ms(200);
  40082e:	20c8      	movs	r0, #200	; 0xc8
  400830:	47a0      	blx	r4
	p_pio->PIO_CODR = ul_mask;
  400832:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
        _delay_ms(200);
  400836:	20c8      	movs	r0, #200	; 0xc8
  400838:	47a0      	blx	r4
      for (int i = 0; i < 5; i++) {
  40083a:	3d01      	subs	r5, #1
  40083c:	d1f5      	bne.n	40082a <main+0x5a>
  40083e:	e7d1      	b.n	4007e4 <main+0x14>
  400840:	2505      	movs	r5, #5
	p_pio->PIO_SODR = ul_mask;
  400842:	f8df 8034 	ldr.w	r8, [pc, #52]	; 400878 <main+0xa8>
  400846:	f04f 0904 	mov.w	r9, #4
  40084a:	46cb      	mov	fp, r9
  40084c:	f8c8 b030 	str.w	fp, [r8, #48]	; 0x30
                 BUT3_PIO_IDX_MASK)) { // Caso aperte Botao 3
      for (int i = 0; i < 5; i++) {
        _pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
        _delay_ms(200);
  400850:	20c8      	movs	r0, #200	; 0xc8
  400852:	47a0      	blx	r4
	p_pio->PIO_CODR = ul_mask;
  400854:	f8c8 9034 	str.w	r9, [r8, #52]	; 0x34
        _pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
        _delay_ms(200);
  400858:	20c8      	movs	r0, #200	; 0xc8
  40085a:	47a0      	blx	r4
      for (int i = 0; i < 5; i++) {
  40085c:	3d01      	subs	r5, #1
  40085e:	d1f5      	bne.n	40084c <main+0x7c>
	p_pio->PIO_CODR = ul_mask;
  400860:	2204      	movs	r2, #4
  400862:	4b05      	ldr	r3, [pc, #20]	; (400878 <main+0xa8>)
  400864:	635a      	str	r2, [r3, #52]	; 0x34
  400866:	e7c4      	b.n	4007f2 <main+0x22>
  400868:	004006f1 	.word	0x004006f1
  40086c:	400e0e00 	.word	0x400e0e00
  400870:	400e1200 	.word	0x400e1200
  400874:	004006cd 	.word	0x004006cd
  400878:	400e1000 	.word	0x400e1000
  40087c:	400e1400 	.word	0x400e1400

00400880 <__libc_init_array>:
  400880:	b570      	push	{r4, r5, r6, lr}
  400882:	4e0f      	ldr	r6, [pc, #60]	; (4008c0 <__libc_init_array+0x40>)
  400884:	4d0f      	ldr	r5, [pc, #60]	; (4008c4 <__libc_init_array+0x44>)
  400886:	1b76      	subs	r6, r6, r5
  400888:	10b6      	asrs	r6, r6, #2
  40088a:	bf18      	it	ne
  40088c:	2400      	movne	r4, #0
  40088e:	d005      	beq.n	40089c <__libc_init_array+0x1c>
  400890:	3401      	adds	r4, #1
  400892:	f855 3b04 	ldr.w	r3, [r5], #4
  400896:	4798      	blx	r3
  400898:	42a6      	cmp	r6, r4
  40089a:	d1f9      	bne.n	400890 <__libc_init_array+0x10>
  40089c:	4e0a      	ldr	r6, [pc, #40]	; (4008c8 <__libc_init_array+0x48>)
  40089e:	4d0b      	ldr	r5, [pc, #44]	; (4008cc <__libc_init_array+0x4c>)
  4008a0:	1b76      	subs	r6, r6, r5
  4008a2:	f000 f8a7 	bl	4009f4 <_init>
  4008a6:	10b6      	asrs	r6, r6, #2
  4008a8:	bf18      	it	ne
  4008aa:	2400      	movne	r4, #0
  4008ac:	d006      	beq.n	4008bc <__libc_init_array+0x3c>
  4008ae:	3401      	adds	r4, #1
  4008b0:	f855 3b04 	ldr.w	r3, [r5], #4
  4008b4:	4798      	blx	r3
  4008b6:	42a6      	cmp	r6, r4
  4008b8:	d1f9      	bne.n	4008ae <__libc_init_array+0x2e>
  4008ba:	bd70      	pop	{r4, r5, r6, pc}
  4008bc:	bd70      	pop	{r4, r5, r6, pc}
  4008be:	bf00      	nop
  4008c0:	00400a00 	.word	0x00400a00
  4008c4:	00400a00 	.word	0x00400a00
  4008c8:	00400a08 	.word	0x00400a08
  4008cc:	00400a00 	.word	0x00400a00

004008d0 <register_fini>:
  4008d0:	4b02      	ldr	r3, [pc, #8]	; (4008dc <register_fini+0xc>)
  4008d2:	b113      	cbz	r3, 4008da <register_fini+0xa>
  4008d4:	4802      	ldr	r0, [pc, #8]	; (4008e0 <register_fini+0x10>)
  4008d6:	f000 b805 	b.w	4008e4 <atexit>
  4008da:	4770      	bx	lr
  4008dc:	00000000 	.word	0x00000000
  4008e0:	004008f1 	.word	0x004008f1

004008e4 <atexit>:
  4008e4:	2300      	movs	r3, #0
  4008e6:	4601      	mov	r1, r0
  4008e8:	461a      	mov	r2, r3
  4008ea:	4618      	mov	r0, r3
  4008ec:	f000 b81e 	b.w	40092c <__register_exitproc>

004008f0 <__libc_fini_array>:
  4008f0:	b538      	push	{r3, r4, r5, lr}
  4008f2:	4c0a      	ldr	r4, [pc, #40]	; (40091c <__libc_fini_array+0x2c>)
  4008f4:	4d0a      	ldr	r5, [pc, #40]	; (400920 <__libc_fini_array+0x30>)
  4008f6:	1b64      	subs	r4, r4, r5
  4008f8:	10a4      	asrs	r4, r4, #2
  4008fa:	d00a      	beq.n	400912 <__libc_fini_array+0x22>
  4008fc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400900:	3b01      	subs	r3, #1
  400902:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400906:	3c01      	subs	r4, #1
  400908:	f855 3904 	ldr.w	r3, [r5], #-4
  40090c:	4798      	blx	r3
  40090e:	2c00      	cmp	r4, #0
  400910:	d1f9      	bne.n	400906 <__libc_fini_array+0x16>
  400912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400916:	f000 b877 	b.w	400a08 <_fini>
  40091a:	bf00      	nop
  40091c:	00400a18 	.word	0x00400a18
  400920:	00400a14 	.word	0x00400a14

00400924 <__retarget_lock_acquire_recursive>:
  400924:	4770      	bx	lr
  400926:	bf00      	nop

00400928 <__retarget_lock_release_recursive>:
  400928:	4770      	bx	lr
  40092a:	bf00      	nop

0040092c <__register_exitproc>:
  40092c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400930:	4d2c      	ldr	r5, [pc, #176]	; (4009e4 <__register_exitproc+0xb8>)
  400932:	4606      	mov	r6, r0
  400934:	6828      	ldr	r0, [r5, #0]
  400936:	4698      	mov	r8, r3
  400938:	460f      	mov	r7, r1
  40093a:	4691      	mov	r9, r2
  40093c:	f7ff fff2 	bl	400924 <__retarget_lock_acquire_recursive>
  400940:	4b29      	ldr	r3, [pc, #164]	; (4009e8 <__register_exitproc+0xbc>)
  400942:	681c      	ldr	r4, [r3, #0]
  400944:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400948:	2b00      	cmp	r3, #0
  40094a:	d03e      	beq.n	4009ca <__register_exitproc+0x9e>
  40094c:	685a      	ldr	r2, [r3, #4]
  40094e:	2a1f      	cmp	r2, #31
  400950:	dc1c      	bgt.n	40098c <__register_exitproc+0x60>
  400952:	f102 0e01 	add.w	lr, r2, #1
  400956:	b176      	cbz	r6, 400976 <__register_exitproc+0x4a>
  400958:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40095c:	2401      	movs	r4, #1
  40095e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  400962:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400966:	4094      	lsls	r4, r2
  400968:	4320      	orrs	r0, r4
  40096a:	2e02      	cmp	r6, #2
  40096c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400970:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  400974:	d023      	beq.n	4009be <__register_exitproc+0x92>
  400976:	3202      	adds	r2, #2
  400978:	f8c3 e004 	str.w	lr, [r3, #4]
  40097c:	6828      	ldr	r0, [r5, #0]
  40097e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400982:	f7ff ffd1 	bl	400928 <__retarget_lock_release_recursive>
  400986:	2000      	movs	r0, #0
  400988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40098c:	4b17      	ldr	r3, [pc, #92]	; (4009ec <__register_exitproc+0xc0>)
  40098e:	b30b      	cbz	r3, 4009d4 <__register_exitproc+0xa8>
  400990:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400994:	f3af 8000 	nop.w
  400998:	4603      	mov	r3, r0
  40099a:	b1d8      	cbz	r0, 4009d4 <__register_exitproc+0xa8>
  40099c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4009a0:	6002      	str	r2, [r0, #0]
  4009a2:	2100      	movs	r1, #0
  4009a4:	6041      	str	r1, [r0, #4]
  4009a6:	460a      	mov	r2, r1
  4009a8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4009ac:	f04f 0e01 	mov.w	lr, #1
  4009b0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4009b4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4009b8:	2e00      	cmp	r6, #0
  4009ba:	d0dc      	beq.n	400976 <__register_exitproc+0x4a>
  4009bc:	e7cc      	b.n	400958 <__register_exitproc+0x2c>
  4009be:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4009c2:	430c      	orrs	r4, r1
  4009c4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4009c8:	e7d5      	b.n	400976 <__register_exitproc+0x4a>
  4009ca:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4009ce:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4009d2:	e7bb      	b.n	40094c <__register_exitproc+0x20>
  4009d4:	6828      	ldr	r0, [r5, #0]
  4009d6:	f7ff ffa7 	bl	400928 <__retarget_lock_release_recursive>
  4009da:	f04f 30ff 	mov.w	r0, #4294967295
  4009de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4009e2:	bf00      	nop
  4009e4:	20400430 	.word	0x20400430
  4009e8:	004009f0 	.word	0x004009f0
  4009ec:	00000000 	.word	0x00000000

004009f0 <_global_impure_ptr>:
  4009f0:	20400008                                ..@ 

004009f4 <_init>:
  4009f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4009f6:	bf00      	nop
  4009f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4009fa:	bc08      	pop	{r3}
  4009fc:	469e      	mov	lr, r3
  4009fe:	4770      	bx	lr

00400a00 <__init_array_start>:
  400a00:	004008d1 	.word	0x004008d1

00400a04 <__frame_dummy_init_array_entry>:
  400a04:	00400165                                e.@.

00400a08 <_fini>:
  400a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400a0a:	bf00      	nop
  400a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400a0e:	bc08      	pop	{r3}
  400a10:	469e      	mov	lr, r3
  400a12:	4770      	bx	lr

00400a14 <__fini_array_start>:
  400a14:	00400141 	.word	0x00400141
